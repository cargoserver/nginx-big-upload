error_log  /var/log/nginx/error.log warn;
daemon on;
#worker_processes 1;
user root root;
worker_rlimit_core  500M;
working_directory   /tmp;

#This is required for Debian only
include /etc/nginx/modules-enabled/*.conf;

events {
	worker_connections 10;
}

http {

 lua_package_path "/opt/nginx-big-upload/lib/?.lua;;";

 server {

   keepalive_requests 1000;

   listen 0.0.0.0:8088;

   # Just testing http code 500, nginx+lua socket streaming doesn't support httpv2 yet
   listen 0.0.0.0:8833 http2 default_server;

   server_name localhost;
 #  access_log /dev/stdout combined;
   error_log /dev/stderr warn;

   client_body_buffer_size 2m;
   client_max_body_size 2m;
   lua_socket_buffer_size 2m;

   # unmanaged upload with file_storage_handler - status 201 for all chunks
   location = /upload/resumable {
     set $bu_checksum off;
     set $bu_sha1 off;
     set $bu_sha256 off;
     set $storage file;  #default
     set $file_storage_path /tmp;
     content_by_lua_file /opt/nginx-big-upload/lib/big-upload.lua;
   }

   # backend managed upload with backend_file_storage_handler
   location = /upload/backend {
     set $storage backend_file;  #default
     set $bu_checksum off;
     set $bu_sha1 off;
     set $bu_sha256 off;
     set $file_storage_path /tmp;
     set $backend_url /bknd;
     content_by_lua_file /opt/nginx-big-upload/lib/big-upload.lua;
   }

   #backend managed with crc32 (client-side state) support
   location = /upload/backend-crc32 {
     set $storage backend_file;  #default
     set $bu_checksum on;
     set $bu_sha1 off;
     set $bu_sha256 off;
     set $file_storage_path /tmp;
     set $backend_url /bknd;
     content_by_lua_file /opt/nginx-big-upload/lib/big-upload.lua;
   }

   #backend managed with crc32 (server-side state) support
   location = /upload/backend-crc32s {
     set $storage backend_file;
     set $bu_checksum server;
     set $bu_sha1 off;
     set $bu_sha256 off;
     set $file_storage_path /tmp;
     set $backend_url /bknd;
     content_by_lua_file /opt/nginx-big-upload/lib/big-upload.lua;
   }

   #backend managed with sha1 support
   location = /upload/backend-sha1 {
     set $storage backend_file;  #default
     set $bu_checksum on;
     set $bu_sha1 on;
     set $bu_sha256 off;
     set $file_storage_path /tmp;
     set $backend_url /bknd;
     content_by_lua_file /opt/nginx-big-upload/lib/big-upload.lua;
   }

   #backend managed with sha256 support
   location = /upload/backend-sha256 {
     set $storage backend_file;  #default
     set $bu_checksum on;
     set $bu_sha1 off;
     set $bu_sha256 on;
     set $file_storage_path /tmp;
     set $backend_url /bknd;
     content_by_lua_file /opt/nginx-big-upload/lib/big-upload.lua;
   }

   # setup of lua big-upload for performance tests
   location = /upload/perf-bu {
     gzip off;
     access_log off;
     set $bu_checksum off;
     set $bu_sha1 off;
     set $bu_sha256 off;
     set $storage backend_file;  #default
     set $file_storage_path /tmp;
     set $backend_url /bknd;
     content_by_lua_file /opt/nginx-big-upload/lib/big-upload.lua;
   }

   # setup of lua big-upload for performance tests with CRC32
   location = /upload/perf-bu-crc {
     gzip off;
     access_log off;
     set $bu_checksum on;
     set $bu_sha1 off;
     set $bu_sha256 off;
     set $storage backend_file;  #default
     set $file_storage_path /tmp;
     set $backend_url /bknd;
     content_by_lua_file /opt/nginx-big-upload/lib/big-upload.lua;
   }

   # setup of lua big-upload for performance tests with CRC32
   location = /upload/perf-bu-crc-server {
     gzip off;
     access_log off;
     set $bu_checksum server;
     set $bu_sha1 off;
     set $bu_sha256 off;
     set $storage backend_file;  #default
     set $file_storage_path /tmp;
     set $backend_url /bknd;
     content_by_lua_file /opt/nginx-big-upload/lib/big-upload.lua;
   }

   # setup of lua big-upload for performance tests with SHA1
   location = /upload/perf-bu-sha1 {
     gzip off;
     access_log off;
     set $bu_checksum off;
     set $bu_sha1 on;
     set $bu_sha256 off;
     set $storage backend_file;  #default
     set $file_storage_path /tmp;
     set $backend_url /bknd;
     content_by_lua_file /opt/nginx-big-upload/lib/big-upload.lua;
   }

   # setup of lua big-upload for performance tests with full load options
   location = /upload/perf-bu-full {
     gzip off;
     access_log off;
     set $bu_checksum server;
     set $bu_sha1 on;
     set $bu_sha256 on;
     set $storage backend_file;
     set $file_storage_path /tmp;
     set $backend_url /bknd;
     content_by_lua_file /opt/nginx-big-upload/lib/big-upload.lua;
   }

   #this is backend experiment to check if lua module can capture named locations
   location /bknd {
     internal;
#     access_log off;
     content_by_lua 'ngx.exec("@backend")';
   }

   # backend mock for upload tests, return some header and echoes body input
   location @backend {
     content_by_lua '
        ngx.header["X-Test"]="testvalue"
        ngx.header["X-Checksum"]=ngx.req.get_headers()["X-Checksum"]
        ngx.status = 202
        ngx.print(ngx.req.get_body_data()) -- echo request body
     ';
   }

 }
}
